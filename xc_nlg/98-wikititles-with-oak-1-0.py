# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/98-wikititles-with-oak.ipynb.

# %% auto 0
__all__ = ['pkl_dir', 'pkl_file', 'meta_idx', 'meta_info', 'data_meta', 'lbl_meta', 'args', 'bsz', 'model', 'meta_embed_file',
           'metric', 'learn', 'get_popular_meta_idx']

# %% ../nbs/98-wikititles-with-oak.ipynb 2
import os,torch, torch.multiprocessing as mp, pickle, numpy as np
from transformers import DistilBertConfig
from scipy import sparse

from xcai.basics import *
from xcai.models.oak import OAK003

from xclib.utils.sparse import retain_topk

# %% ../nbs/98-wikititles-with-oak.ipynb 4
os.environ['CUDA_VISIBLE_DEVICES'] = '0,1'
os.environ['WANDB_PROJECT']='xc-nlg_97-oak-dr-ep-for-wikititles'

# %% ../nbs/98-wikititles-with-oak.ipynb 8
pkl_dir = '/home/scai/phd/aiz218323/scratch/datasets/'
pkl_file = f'{pkl_dir}/processed/wikititles_data-lnk_distilbert-base-uncased_xcs.pkl'

# %% ../nbs/98-wikititles-with-oak.ipynb 11
with open(pkl_file, 'rb') as file: block = pickle.load(file)

# %% ../nbs/98-wikititles-with-oak.ipynb 12
block.collator.tfms.tfms[0].sampling_features = [('lbl2data',1),('lnk2data',3)]

# %% ../nbs/98-wikititles-with-oak.ipynb 15
def get_popular_meta_idx(meta:sparse.csr_matrix, topk:int):
    num_meta = meta.getnnz(axis=0)
    return np.argsort(num_meta)[-topk:]
    

# %% ../nbs/98-wikititles-with-oak.ipynb 16
from xcai.data import MetaXCDataset

meta_idx = get_popular_meta_idx(block.train.dset.meta.lnk_meta.data_meta, topk=600_000)
meta_info = {k:[v[i] for i in meta_idx] for k,v in block.train.dset.meta['lnk_meta'].meta_info.items()}

data_meta = block.train.dset.meta['lnk_meta'].data_meta[:, meta_idx]
lbl_meta = sparse.csr_matrix((block.train.dset.meta['lnk_meta'].n_data, len(meta_idx)), 
                             dtype=block.train.dset.meta['lnk_meta'].lbl_meta.dtype)

block.train.dset.meta['clnk_meta'] = MetaXCDataset('clnk', data_meta, lbl_meta, meta_info)

data_meta = block.test.dset.meta['lnk_meta'].data_meta[:, meta_idx]
lbl_meta = sparse.csr_matrix((block.test.dset.meta['lnk_meta'].n_data, len(meta_idx)), 
                             dtype=block.test.dset.meta['lnk_meta'].lbl_meta.dtype)

block.test.dset.meta['clnk_meta'] = MetaXCDataset('clnk', data_meta, lbl_meta, meta_info)


# %% ../nbs/98-wikititles-with-oak.ipynb 18
data_meta = retain_topk(block.train.dset.meta['clnk_meta'].data_meta, k=5)
block.train.dset.meta['clnk_meta'].curr_data_meta = data_meta
block.train.dset.meta['clnk_meta'].data_meta = data_meta

data_meta = retain_topk(block.test.dset.meta['clnk_meta'].data_meta, k=3)
block.test.dset.meta['clnk_meta'].curr_data_meta = data_meta
block.test.dset.meta['clnk_meta'].data_meta = data_meta

# %% ../nbs/98-wikititles-with-oak.ipynb 20
args = XCLearningArguments(
    output_dir='/home/scai/phd/aiz218323/scratch/outputs/98-wikititles-with-oak-1-0',
    logging_first_step=True,
    per_device_train_batch_size=800,
    per_device_eval_batch_size=800,
    representation_num_beams=200,
    representation_accumulation_steps=10,
    save_strategy="steps",
    evaluation_strategy="steps",
    eval_steps=5000,
    save_steps=5000,
    save_total_limit=5,
    num_train_epochs=300,
    predict_with_representation=True,
    adam_epsilon=1e-6,
    warmup_steps=100,
    weight_decay=0.01,
    learning_rate=2e-4,
    generation_num_beams=10,
    generation_length_penalty=1.5,
    predict_with_generation=True,
    representation_search_type='BRUTEFORCE',
    
    output_representation_attribute='data_fused_repr',
    label_representation_attribute='data_repr',
    metadata_representation_attribute='data_repr',
    data_augmentation_attribute='data_repr',
    representation_attribute='data_fused_repr',
    clustering_representation_attribute='data_fused_repr',

    group_by_cluster=True,
    num_clustering_warmup_epochs=10,
    num_cluster_update_epochs=5,
    num_cluster_size_update_epochs=25,
    use_data_metadata_for_clustering=True,
    clustering_type='EXPO',
    minimum_cluster_size=2,
    maximum_cluster_size=1600,

    metric_for_best_model='P@1',
    load_best_model_at_end=True,
    target_indices_key='plbl2data_idx',
    target_pointer_key='plbl2data_data2ptr',
    
    use_distributional_representation=False,
    use_encoder_parallel=True,
    max_grad_norm=None, 
    fp16=True,
    
    label_names=['clnk2data_idx'],
    
    prune_metadata=False,
    num_metadata_prune_warmup_epochs=10,
    num_metadata_prune_epochs=5,
    metadata_prune_batch_size=2048,
    prune_metadata_names=['lnk_meta'],
    use_data_metadata_for_pruning=True,

    predict_with_augmentation=False,
    use_augmentation_index_representation=True,

    data_aug_meta_name='lnk',
    augmentation_num_beams=3,
    data_aug_prefix='lnk',
    use_label_metadata=False,
    
    data_meta_batch_size=2048,
    augment_metadata=False,
    num_metadata_augment_warmup_epochs=10,
    num_metadata_augment_epochs=5,
)


# %% ../nbs/98-wikititles-with-oak.ipynb 21
bsz = max(args.per_device_train_batch_size, args.per_device_eval_batch_size)*torch.cuda.device_count()

model = OAK003.from_pretrained('sentence-transformers/msmarco-distilbert-base-v4', batch_size=bsz, num_batch_labels=5000,
                               margin=0.3, num_negatives=10, tau=0.1, apply_softmax=True,
                                   
                               data_aug_meta_prefix='clnk2data', lbl2data_aug_meta_prefix=None,
                               data_pred_meta_prefix=None, lbl2data_pred_meta_prefix=None,
                                   
                               num_metadata=block.train.dset.meta['clnk_meta'].n_meta, resize_length=5000,

                               calib_margin=0.05, calib_num_negatives=10, calib_tau=0.1, calib_apply_softmax=False,
                               calib_loss_weight=0.1, use_calib_loss=True,
                               
                               use_query_loss=True,
                               
                               meta_loss_weight=0.0,
                               
                               fusion_loss_weight=0.1, use_fusion_loss=False,
                               
                               use_encoder_parallel=False)

model.init_retrieval_head()
model.init_cross_head()
model.init_meta_embeddings()

meta_embed_file = '/home/aiscuser/scratch/OGB_Weights/LF-WikiSeeAlsoTitles-320K/emb_weights.npy'
# meta_embeddings = np.load(meta_embed_file)
# model.encoder.set_pretrained_meta_embeddings(torch.tensor(meta_embeddings, dtype=torch.float32))

model.encoder.set_pretrained_meta_embeddings(torch.zeros(block.train.dset.meta['cwalnk_meta'].n_meta, model.config.dim))
model.encoder.freeze_pretrained_meta_embeddings()

# %% ../nbs/98-wikititles-with-oak.ipynb 23
metric = PrecRecl(block.n_lbl, block.test.data_lbl_filterer, prop=block.train.dset.data.data_lbl,
                  pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200])

# %% ../nbs/98-wikititles-with-oak.ipynb 24
learn = XCLearner(
    model=model, 
    args=args,
    train_dataset=block.train.dset,
    eval_dataset=block.test.dset,
    data_collator=block.collator,
    compute_metrics=metric,
)

# %% ../nbs/98-wikititles-with-oak.ipynb 27
if __name__ == '__main__':
    mp.freeze_support()
    learn.train()
